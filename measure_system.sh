#!/usr/bin/env bash
# Robust system measurement for SONiC
# - Shell-safe: /bin/bash with set -euo pipefail
# - TCTI auto-detection: prefers device:/dev/tpmrm0
# - Uses pre-captured measurements from sonic_measure.c
# - Extends PCRs with consistent file artifacts
# PCR mapping:
#   PCR 13 - Routing state
#   PCR 14 - SONiC config 
#   PCR 15 - HW/SW baseline

set -euo pipefail

log() { printf "[%(%F %T)T] %s\n" -1 "$*"; }

detect_tcti() {
  if [ -e /dev/tpmrm0 ]; then
    echo "device:/dev/tpmrm0"; return
  fi
  if [ -e /dev/tpm0 ]; then
    echo "device:/dev/tpm0"; return
  fi
  # Allow in-guest swtpm sockets only if both sockets exist (data + ctrl)
  local sock="/run/swtpm/sonic/swtpm-sock"
  if [ -S "$sock" ] && [ -S "${sock}.ctrl" ]; then
    echo "swtpm:path=${sock}"; return
  fi
  echo ""
}

# Hash a file and extend a specific PCR (second arg)
extend_pcr() {
  # $1: path to a file to hash and extend
  # $2: PCR index to extend
  local file="$1"
  local pcr="$2"
  local sum
  
  if [ ! -f "$file" ]; then
    log "WARN: File $file does not exist, skipping PCR $pcr extension"
    return 0
  fi
  
  if [ ! -s "$file" ]; then
    log "WARN: File $file is empty, skipping PCR $pcr extension"
    return 0
  fi
  
  sum="$(sha256sum "$file" | awk '{print $1}')"
  # Extend as sha256:HASH
  tpm2_pcrextend "${pcr}:sha256=${sum}" >/dev/null
  printf "%s  %s  PCR=%s\n" "$sum" "$file" "$pcr" >> "${WORKDIR}/measurements.txt"
  log "Extended PCR $pcr with $file (hash: ${sum:0:16}...)"
}

main() {
  log "Starting system measurements with pre-captured data..."
  export WORKDIR="/var/lib/sonic"
  export MEASUREMENTS_DIR="${WORKDIR}/measurements"
  
  mkdir -p "$WORKDIR"
  chmod 700 "$WORKDIR"

  # Check if measurements directory exists
  if [ ! -d "$MEASUREMENTS_DIR" ]; then
    log "ERROR: Measurements directory $MEASUREMENTS_DIR does not exist."
    log "       Please run sonic_measure first to capture system state."
    exit 1
  fi

  TCTI="$(detect_tcti)"
  if [ -z "$TCTI" ]; then
    echo "ERROR: No TPM device found (/dev/tpmrm0 or /dev/tpm0)."
    echo "       Do NOT point to host swtpm sockets from inside the guest."
    exit 1
  fi
  export TPM2TOOLS_TCTI="$TCTI"
  log "Using TPM2TOOLS_TCTI='${TPM2TOOLS_TCTI}'"

  # Sanity probe
  tpm2_getcap properties-fixed >/dev/null

  : > "${WORKDIR}/measurements.txt"

  ############################
  # PCR 13 - ROUTING STATE
  ############################
  log "Extending PCR 13 with routing state..."
  extend_pcr "${MEASUREMENTS_DIR}/routes.txt" "13"

  extend_pcr "${MEASUREMENTS_DIR}/frr_running.txt" "13"

  ############################
  # PCR 14 - SONiC CONFIG
  ############################
  log "Extending PCR 14 with SONiC configuration..."
  extend_pcr "${MEASUREMENTS_DIR}/config_db.txt" "14"

  ############################
  # PCR 15 - HW & SW BASELINE
  ############################
  log "Extending PCR 15 with hardware and software baseline..."
  
  # Extend with firmware/BIOS info
  extend_pcr "${MEASUREMENTS_DIR}/ifaces.txt" "15"
  
  # Extend with kernel info
  #extend_pcr "${MEASUREMENTS_DIR}/kernel.txt" "15"
  
  # Extend with hardware info
  #extend_pcr "${MEASUREMENTS_DIR}/hardware.txt" "15"
  
  # Optionally extend with services (if you want them in baseline)
  # extend_pcr "${MEASUREMENTS_DIR}/services.txt" "15"

  ############################
  # Final PCR reads
  ############################
  log "Final PCR 13 (Routing state):"
  tpm2_pcrread sha256:13 | sed 's/^/  /'
  log "Final PCR 14 (SONiC config):"
  tpm2_pcrread sha256:14 | sed 's/^/  /'
  log "Final PCR 15 (HW & SW base):"
  tpm2_pcrread sha256:15 | sed 's/^/  /'

  # Create a summary of what was measured
  {
    echo "# PCR Extension Summary - $(date)"
    echo "# Generated by measure_system.sh using pre-captured data"
    echo ""
    echo "PCR 13 (Routing): ${MEASUREMENTS_DIR}/routing.txt"
    echo "PCR 14 (SONiC Config): ${MEASUREMENTS_DIR}/sonic_config.txt"
    echo "PCR 15 (HW/SW Baseline):"
    echo "  - ${MEASUREMENTS_DIR}/bios.txt"
    echo "  - ${MEASUREMENTS_DIR}/kernel.txt"
    echo "  - ${MEASUREMENTS_DIR}/hardware.txt"
    echo ""
    echo "# File hashes and PCR extensions:"
  } > "${WORKDIR}/pcr_summary.txt"
  
  # Append the measurements log
  cat "${WORKDIR}/measurements.txt" >> "${WORKDIR}/pcr_summary.txt"

  log "System measurements completed successfully."
  log "Measurements saved to: ${WORKDIR}/measurements.txt"
  log "Summary saved to: ${WORKDIR}/pcr_summary.txt"
  
  # Show file sizes for verification
  log "Measurement file sizes:"
  for f in "${MEASUREMENTS_DIR}"/*.txt; do
    if [ -f "$f" ]; then
      local size=$(wc -c < "$f" 2>/dev/null || echo "0")
      log "  $(basename "$f"): ${size} bytes"
    fi
  done
}

main "$@"